import './faq.svelte.css.proxy.js';
/* src/shared/faq.svelte generated by Svelte v3.31.2 */
import {
	SvelteComponent,
	add_render_callback,
	append,
	attr,
	check_outros,
	children,
	claim_element,
	claim_space,
	claim_text,
	create_bidirectional_transition,
	destroy_each,
	detach,
	element,
	group_outros,
	init,
	insert,
	listen,
	safe_not_equal,
	set_data,
	space,
	svg_element,
	text,
	transition_in,
	transition_out
} from "../_snowpack/pkg/svelte/internal.js";

import { fly } from "../_snowpack/pkg/svelte/transition.js";

function get_each_context(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[3] = list[i];
	return child_ctx;
}

// (35:4) {#if state}
function create_if_block(ctx) {
	let article;
	let article_transition;
	let current;
	let each_value = /*faq*/ ctx[0];
	let each_blocks = [];

	for (let i = 0; i < each_value.length; i += 1) {
		each_blocks[i] = create_each_block(get_each_context(ctx, each_value, i));
	}

	return {
		c() {
			article = element("article");

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}
		},
		l(nodes) {
			article = claim_element(nodes, "ARTICLE", {});
			var article_nodes = children(article);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].l(article_nodes);
			}

			article_nodes.forEach(detach);
		},
		m(target, anchor) {
			insert(target, article, anchor);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(article, null);
			}

			current = true;
		},
		p(ctx, dirty) {
			if (dirty & /*faq*/ 1) {
				each_value = /*faq*/ ctx[0];
				let i;

				for (i = 0; i < each_value.length; i += 1) {
					const child_ctx = get_each_context(ctx, each_value, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
					} else {
						each_blocks[i] = create_each_block(child_ctx);
						each_blocks[i].c();
						each_blocks[i].m(article, null);
					}
				}

				for (; i < each_blocks.length; i += 1) {
					each_blocks[i].d(1);
				}

				each_blocks.length = each_value.length;
			}
		},
		i(local) {
			if (current) return;

			add_render_callback(() => {
				if (!article_transition) article_transition = create_bidirectional_transition(article, fly, {}, true);
				article_transition.run(1);
			});

			current = true;
		},
		o(local) {
			if (!article_transition) article_transition = create_bidirectional_transition(article, fly, {}, false);
			article_transition.run(0);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(article);
			destroy_each(each_blocks, detaching);
			if (detaching && article_transition) article_transition.end();
		}
	};
}

// (37:12) {#each faq as q}
function create_each_block(ctx) {
	let div;
	let h4;
	let t0_value = /*q*/ ctx[3].q + "";
	let t0;
	let t1;
	let p;
	let t2_value = /*q*/ ctx[3].a + "";
	let t2;
	let t3;

	return {
		c() {
			div = element("div");
			h4 = element("h4");
			t0 = text(t0_value);
			t1 = space();
			p = element("p");
			t2 = text(t2_value);
			t3 = space();
		},
		l(nodes) {
			div = claim_element(nodes, "DIV", {});
			var div_nodes = children(div);
			h4 = claim_element(div_nodes, "H4", {});
			var h4_nodes = children(h4);
			t0 = claim_text(h4_nodes, t0_value);
			h4_nodes.forEach(detach);
			t1 = claim_space(div_nodes);
			p = claim_element(div_nodes, "P", {});
			var p_nodes = children(p);
			t2 = claim_text(p_nodes, t2_value);
			p_nodes.forEach(detach);
			t3 = claim_space(div_nodes);
			div_nodes.forEach(detach);
		},
		m(target, anchor) {
			insert(target, div, anchor);
			append(div, h4);
			append(h4, t0);
			append(div, t1);
			append(div, p);
			append(p, t2);
			append(div, t3);
		},
		p(ctx, dirty) {
			if (dirty & /*faq*/ 1 && t0_value !== (t0_value = /*q*/ ctx[3].q + "")) set_data(t0, t0_value);
			if (dirty & /*faq*/ 1 && t2_value !== (t2_value = /*q*/ ctx[3].a + "")) set_data(t2, t2_value);
		},
		d(detaching) {
			if (detaching) detach(div);
		}
	};
}

function create_fragment(ctx) {
	let article;
	let div;
	let h3;
	let t0;
	let t1;
	let svg;
	let path;
	let path_d_value;
	let t2;
	let hr;
	let t3;
	let current;
	let mounted;
	let dispose;
	let if_block = /*state*/ ctx[1] && create_if_block(ctx);

	return {
		c() {
			article = element("article");
			div = element("div");
			h3 = element("h3");
			t0 = text("Frequently Asked Questions");
			t1 = space();
			svg = svg_element("svg");
			path = svg_element("path");
			t2 = space();
			hr = element("hr");
			t3 = space();
			if (if_block) if_block.c();
			this.h();
		},
		l(nodes) {
			article = claim_element(nodes, "ARTICLE", { class: true });
			var article_nodes = children(article);
			div = claim_element(article_nodes, "DIV", { class: true });
			var div_nodes = children(div);
			h3 = claim_element(div_nodes, "H3", {});
			var h3_nodes = children(h3);
			t0 = claim_text(h3_nodes, "Frequently Asked Questions");
			h3_nodes.forEach(detach);
			t1 = claim_space(div_nodes);

			svg = claim_element(
				div_nodes,
				"svg",
				{
					xmlns: true,
					viewBox: true,
					width: true,
					height: true,
					fill: true,
					stroke: true,
					"stroke-width": true
				},
				1
			);

			var svg_nodes = children(svg);
			path = claim_element(svg_nodes, "path", { d: true }, 1);
			children(path).forEach(detach);
			svg_nodes.forEach(detach);
			div_nodes.forEach(detach);
			t2 = claim_space(article_nodes);
			hr = claim_element(article_nodes, "HR", {});
			t3 = claim_space(article_nodes);
			if (if_block) if_block.l(article_nodes);
			article_nodes.forEach(detach);
			this.h();
		},
		h() {
			attr(path, "d", path_d_value = `M30 ${/*state*/ ctx[1] ? "12" : "20"} L16 ${/*state*/ ctx[1] ? "24 2 12" : "8 2 20"}`);
			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
			attr(svg, "viewBox", "0 0 32 32");
			attr(svg, "width", "32");
			attr(svg, "height", "32");
			attr(svg, "fill", "none");
			attr(svg, "stroke", "#222a");
			attr(svg, "stroke-width", "2");
			attr(div, "class", "head svelte-b0r41q");
			attr(article, "class", "collapse svelte-b0r41q");
		},
		m(target, anchor) {
			insert(target, article, anchor);
			append(article, div);
			append(div, h3);
			append(h3, t0);
			append(div, t1);
			append(div, svg);
			append(svg, path);
			append(article, t2);
			append(article, hr);
			append(article, t3);
			if (if_block) if_block.m(article, null);
			current = true;

			if (!mounted) {
				dispose = listen(div, "click", /*click_handler*/ ctx[2]);
				mounted = true;
			}
		},
		p(ctx, [dirty]) {
			if (!current || dirty & /*state*/ 2 && path_d_value !== (path_d_value = `M30 ${/*state*/ ctx[1] ? "12" : "20"} L16 ${/*state*/ ctx[1] ? "24 2 12" : "8 2 20"}`)) {
				attr(path, "d", path_d_value);
			}

			if (/*state*/ ctx[1]) {
				if (if_block) {
					if_block.p(ctx, dirty);

					if (dirty & /*state*/ 2) {
						transition_in(if_block, 1);
					}
				} else {
					if_block = create_if_block(ctx);
					if_block.c();
					transition_in(if_block, 1);
					if_block.m(article, null);
				}
			} else if (if_block) {
				group_outros();

				transition_out(if_block, 1, 1, () => {
					if_block = null;
				});

				check_outros();
			}
		},
		i(local) {
			if (current) return;
			transition_in(if_block);
			current = true;
		},
		o(local) {
			transition_out(if_block);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(article);
			if (if_block) if_block.d();
			mounted = false;
			dispose();
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	let { faq } = $$props;
	let state = 1;
	const click_handler = () => $$invalidate(1, state = !state);

	$$self.$$set = $$props => {
		if ("faq" in $$props) $$invalidate(0, faq = $$props.faq);
	};

	return [faq, state, click_handler];
}

class Faq extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance, create_fragment, safe_not_equal, { faq: 0 });
	}
}

export default Faq;
//# sourceMappingURL=faq.svelte.js.map
