import './courses.svelte.css.proxy.js';
/* src/components/courses.svelte generated by Svelte v3.31.2 */
import {
	SvelteComponent,
	append,
	attr,
	children,
	claim_element,
	claim_space,
	claim_text,
	destroy_each,
	detach,
	element,
	init,
	insert,
	noop,
	safe_not_equal,
	set_style,
	space,
	text
} from "../_snowpack/pkg/svelte/internal.js";

import crs from "./courses.json.proxy.js";

function get_each_context(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[0] = list[i];
	return child_ctx;
}

// (36:4) {#each crs as cr}
function create_each_block(ctx) {
	let a;
	let div3;
	let img;
	let img_src_value;
	let t0;
	let div2;
	let div0;
	let t1_value = /*cr*/ ctx[0].long + "";
	let t1;
	let t2;
	let div1;
	let t3_value = /*cr*/ ctx[0].short + "";
	let t3;
	let t4;
	let t5_value = /*cr*/ ctx[0].time + "";
	let t5;
	let t6;
	let t7;
	let p;
	let t8_value = /*cr*/ ctx[0].about + "";
	let t8;
	let t9;
	let a_href_value;

	return {
		c() {
			a = element("a");
			div3 = element("div");
			img = element("img");
			t0 = space();
			div2 = element("div");
			div0 = element("div");
			t1 = text(t1_value);
			t2 = space();
			div1 = element("div");
			t3 = text(t3_value);
			t4 = text(" (");
			t5 = text(t5_value);
			t6 = text(")");
			t7 = space();
			p = element("p");
			t8 = text(t8_value);
			t9 = space();
			this.h();
		},
		l(nodes) {
			a = claim_element(nodes, "A", { href: true });
			var a_nodes = children(a);
			div3 = claim_element(a_nodes, "DIV", { class: true });
			var div3_nodes = children(div3);
			img = claim_element(div3_nodes, "IMG", { src: true, alt: true, class: true });
			t0 = claim_space(div3_nodes);
			div2 = claim_element(div3_nodes, "DIV", { class: true });
			var div2_nodes = children(div2);
			div0 = claim_element(div2_nodes, "DIV", { style: true, class: true });
			var div0_nodes = children(div0);
			t1 = claim_text(div0_nodes, t1_value);
			div0_nodes.forEach(detach);
			t2 = claim_space(div2_nodes);
			div1 = claim_element(div2_nodes, "DIV", { class: true });
			var div1_nodes = children(div1);
			t3 = claim_text(div1_nodes, t3_value);
			t4 = claim_text(div1_nodes, " (");
			t5 = claim_text(div1_nodes, t5_value);
			t6 = claim_text(div1_nodes, ")");
			div1_nodes.forEach(detach);
			t7 = claim_space(div2_nodes);
			p = claim_element(div2_nodes, "P", { class: true });
			var p_nodes = children(p);
			t8 = claim_text(p_nodes, t8_value);
			p_nodes.forEach(detach);
			div2_nodes.forEach(detach);
			div3_nodes.forEach(detach);
			t9 = claim_space(a_nodes);
			a_nodes.forEach(detach);
			this.h();
		},
		h() {
			if (img.src !== (img_src_value = /*cr*/ ctx[0].image)) attr(img, "src", img_src_value);
			attr(img, "alt", "");
			attr(img, "class", "svelte-1he07yy");
			set_style(div0, "font-weight", "600");
			attr(div0, "class", "svelte-1he07yy");
			attr(div1, "class", "svelte-1he07yy");
			attr(p, "class", "svelte-1he07yy");
			attr(div2, "class", "svelte-1he07yy");
			attr(div3, "class", "course svelte-1he07yy");
			attr(a, "href", a_href_value = "/courses/" + /*cr*/ ctx[0].page);
		},
		m(target, anchor) {
			insert(target, a, anchor);
			append(a, div3);
			append(div3, img);
			append(div3, t0);
			append(div3, div2);
			append(div2, div0);
			append(div0, t1);
			append(div2, t2);
			append(div2, div1);
			append(div1, t3);
			append(div1, t4);
			append(div1, t5);
			append(div1, t6);
			append(div2, t7);
			append(div2, p);
			append(p, t8);
			append(a, t9);
		},
		p: noop,
		d(detaching) {
			if (detaching) detach(a);
		}
	};
}

function create_fragment(ctx) {
	let section;
	let each_value = crs;
	let each_blocks = [];

	for (let i = 0; i < each_value.length; i += 1) {
		each_blocks[i] = create_each_block(get_each_context(ctx, each_value, i));
	}

	return {
		c() {
			section = element("section");

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			this.h();
		},
		l(nodes) {
			section = claim_element(nodes, "SECTION", { class: true });
			var section_nodes = children(section);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].l(section_nodes);
			}

			section_nodes.forEach(detach);
			this.h();
		},
		h() {
			attr(section, "class", "svelte-1he07yy");
		},
		m(target, anchor) {
			insert(target, section, anchor);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(section, null);
			}
		},
		p(ctx, [dirty]) {
			if (dirty & /*crs*/ 0) {
				each_value = crs;
				let i;

				for (i = 0; i < each_value.length; i += 1) {
					const child_ctx = get_each_context(ctx, each_value, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
					} else {
						each_blocks[i] = create_each_block(child_ctx);
						each_blocks[i].c();
						each_blocks[i].m(section, null);
					}
				}

				for (; i < each_blocks.length; i += 1) {
					each_blocks[i].d(1);
				}

				each_blocks.length = each_value.length;
			}
		},
		i: noop,
		o: noop,
		d(detaching) {
			if (detaching) detach(section);
			destroy_each(each_blocks, detaching);
		}
	};
}

class Courses extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, null, create_fragment, safe_not_equal, {});
	}
}

export default Courses;
//# sourceMappingURL=courses.svelte.js.map
