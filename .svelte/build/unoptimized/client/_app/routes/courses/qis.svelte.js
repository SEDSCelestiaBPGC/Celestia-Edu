import './qis.svelte.css.proxy.js';
/* src/routes/courses/qis.svelte generated by Svelte v3.31.2 */
import {
	SvelteComponent,
	append,
	attr,
	children,
	claim_component,
	claim_element,
	claim_space,
	claim_text,
	create_component,
	destroy_component,
	detach,
	element,
	init,
	insert,
	mount_component,
	noop,
	safe_not_equal,
	space,
	text,
	transition_in,
	transition_out
} from "../../../_snowpack/pkg/svelte/internal.js";

import config from "../../../_data/qis/config.json.proxy.js";
import FAQ from "../../../_shared/faq.svelte.js";

function create_fragment(ctx) {
	let section;
	let h2;
	let t0;
	let t1;
	let faq;
	let current;
	faq = new FAQ({ props: { faq: config.faq } });

	return {
		c() {
			section = element("section");
			h2 = element("h2");
			t0 = text("Quantum Information & Security");
			t1 = space();
			create_component(faq.$$.fragment);
			this.h();
		},
		l(nodes) {
			section = claim_element(nodes, "SECTION", { class: true });
			var section_nodes = children(section);
			h2 = claim_element(section_nodes, "H2", {});
			var h2_nodes = children(h2);
			t0 = claim_text(h2_nodes, "Quantum Information & Security");
			h2_nodes.forEach(detach);
			t1 = claim_space(section_nodes);
			claim_component(faq.$$.fragment, section_nodes);
			section_nodes.forEach(detach);
			this.h();
		},
		h() {
			attr(section, "class", "svelte-1tucdev");
		},
		m(target, anchor) {
			insert(target, section, anchor);
			append(section, h2);
			append(h2, t0);
			append(section, t1);
			mount_component(faq, section, null);
			current = true;
		},
		p: noop,
		i(local) {
			if (current) return;
			transition_in(faq.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(faq.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(section);
			destroy_component(faq);
		}
	};
}

class Qis extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, null, create_fragment, safe_not_equal, {});
	}
}

export default Qis;
//# sourceMappingURL=qis.svelte.js.map
